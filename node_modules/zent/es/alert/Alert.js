import { __assign, __extends, __rest } from "tslib";
import * as React from 'react';
import cx from 'classnames';
import isNil from 'lodash-es/isNil';
import omit from 'lodash-es/omit';
import Icon from '../icon';
import InlineLoading from '../loading/InlineLoading';
var iconTypeMap = {
    info: 'info-circle',
    warning: 'warning',
    success: 'check-circle',
    error: 'error-circle',
};
var renderOmitProps = [
    'title',
    'description',
    'loading',
    'closable',
    'closed',
    'onClose',
    'closeContent',
];
var Alert = (function (_super) {
    __extends(Alert, _super);
    function Alert() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            closed: false,
        };
        _this.onCloseHandler = function () {
            if (!_this.isControlled) {
                _this.setState({
                    closed: true,
                });
            }
            _this.props.onClose && _this.props.onClose();
        };
        return _this;
    }
    Object.defineProperty(Alert.prototype, "isControlled", {
        get: function () {
            var closed = this.props.closed;
            var hasClosed = !isNil(closed);
            return hasClosed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Alert.prototype, "closed", {
        get: function () {
            return this.isControlled ? this.props.closed : this.state.closed;
        },
        enumerable: true,
        configurable: true
    });
    Alert.prototype.renderContent = function () {
        var _a = this.props, title = _a.title, description = _a.description, children = _a.children;
        return children ? (children) : (React.createElement(React.Fragment, null,
            title && React.createElement("h3", { className: "zent-alert-content__title" }, title),
            description && (React.createElement("p", { className: "zent-alert-content__description" }, description))));
    };
    Alert.prototype.renderCloseNode = function () {
        var _a = this.props, closable = _a.closable, closeContent = _a.closeContent;
        return closable ? (React.createElement("div", { className: "zent-alert-close-wrapper", onClick: this.onCloseHandler }, closeContent ? (closeContent) : (React.createElement(Icon, { type: "close", className: "zent-alert-close-btn" })))) : null;
    };
    Alert.prototype.renderIcon = function () {
        var _a = this.props, loading = _a.loading, type = _a.type;
        return loading ? (React.createElement(InlineLoading, { className: "zent-alert-icon", loading: true, icon: "circle", iconSize: 16 })) : (React.createElement(Icon, { className: "zent-alert-icon", type: iconTypeMap[type] }));
    };
    Alert.prototype.render = function () {
        var _a;
        if (this.closed) {
            return null;
        }
        var _b = omit(this.props, renderOmitProps), className = _b.className, _c = _b.type, type = _c === void 0 ? 'info' : _c, outline = _b.outline, extraContent = _b.extraContent, restDivAttrs = __rest(_b, ["className", "type", "outline", "extraContent"]);
        var alertIcon = this.renderIcon();
        var content = this.renderContent();
        var closeNode = this.renderCloseNode();
        var containerCls = cx('zent-alert', "zent-alert-style-" + type, className, (_a = {},
            _a['zent-alert-outline'] = outline,
            _a));
        return (React.createElement("div", __assign({ className: containerCls }, restDivAttrs),
            alertIcon,
            React.createElement("div", { className: "zent-alert-content" }, content),
            extraContent && (React.createElement("div", { className: "zent-alert-extra-content" }, extraContent)),
            closeNode));
    };
    Alert.highlightClassName = 'zent-alert-content__highlight';
    Alert.defaultProps = {
        type: 'info',
        loading: false,
        outline: false,
        closable: false,
    };
    return Alert;
}(React.PureComponent));
export { Alert };
export default Alert;
