import { Component } from 'react';
import * as sortableJS from 'sortablejs';
export declare type SortableGroup = {
    name: string;
    pull: boolean | 'clone' | ((to: sortableJS, from: sortableJS) => string | boolean);
    put: string | boolean | ReadonlyArray<string> | ((to: sortableJS) => boolean);
    revertClone: boolean;
} | string;
export interface ISortableProps {
    className?: string;
    prefix?: string;
    tag?: string;
    items?: any[];
    onChange?: (newItems: any[]) => void;
    filterClass?: string;
    sort?: boolean;
    group?: string | SortableGroup;
    delay?: number;
    animation?: number;
    handle?: string;
    ghostClass?: string;
    chosenClass?: string;
    dragClass?: string;
    forceFallback?: boolean;
    fallbackClass?: string;
    fallbackOnBody?: boolean;
    fallbackTolerance?: number;
    scroll?: boolean;
    scrollFn?: (offsetX: number, offsetY: number, originalEvent: MouseEvent) => any;
    scrollSensitivity?: number;
    scrollSpeed?: number;
    setData?: (dataTransfer: DataTransfer, dragEl: HTMLElement) => any;
    onStart?: (event: Event) => any;
    onEnd?: (event: Event) => any;
    onAdd?: (event: Event) => any;
    onUpdate?: (event: Event) => any;
    onSort?: (event: Event) => any;
    onRemove?: (event: Event) => any;
    onFilter?: (event: Event) => any;
    onMove?: (event: Event) => boolean;
    onClone?: (event: Event) => boolean;
}
export declare class Sortable extends Component<ISortableProps> {
    static defaultProps: {
        prefix: string;
        tag: string;
    };
    sortable: sortableJS;
    initSortable: (instance: HTMLElement) => void;
    componentWillUnmount(): void;
    render(): JSX.Element;
}
export default Sortable;
