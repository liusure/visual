import assign from 'lodash-es/assign';
import get from 'lodash-es/get';
import has from 'lodash-es/has';
import indexOf from 'lodash-es/indexOf';
import keys from 'lodash-es/keys';
import forEach from 'lodash-es/forEach';
var Store = (function () {
    function Store() {
        var _this = this;
        this.state = {};
        this.listeners = {};
        this.setState = function (nextState) {
            _this.state = assign({}, _this.state, nextState);
            forEach(keys(nextState), function (stateName) {
                forEach(get(_this.listeners, stateName), function (listener) {
                    listener();
                });
            });
        };
        this.trigger = function (eventName) {
            forEach(get(_this.listeners, eventName), function (listener) {
                listener();
            });
        };
        this.subscribe = function (eventName, listener) {
            _this.listeners[eventName] = _this.listeners[eventName] || [];
            _this.listeners[eventName].push(listener);
            return function () {
                var listeners = get(_this.listeners, eventName);
                var index = indexOf(listeners, listener);
                if (Array.isArray(listeners)) {
                    _this.listeners[eventName].splice(index, 1);
                }
            };
        };
    }
    Store.prototype.getState = function (propsName, callBack) {
        var _a;
        if (propsName) {
            var props = get(this.state, propsName);
            if (callBack && !has(this.state, propsName)) {
                this.setState((_a = {},
                    _a[propsName] = callBack(),
                    _a));
                return this.getState(propsName);
            }
            return props;
        }
        return this.state;
    };
    return Store;
}());
export default Store;
