import { __assign, __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import get from 'lodash-es/get';
import has from 'lodash-es/has';
import isNil from 'lodash-es/isNil';
import classnames from 'classnames';
var Cell = (function (_super) {
    __extends(Cell, _super);
    function Cell() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getText = function (props) {
            return get(props, "data." + get(props, 'column.name'));
        };
        _this.onClick = function (e) {
            var _a = _this.props, data = _a.data, onCellClick = _a.column.onCellClick;
            if (typeof onCellClick === 'function') {
                onCellClick(data, e);
            }
        };
        return _this;
    }
    Cell.prototype.isInvalidRenderCellText = function (text) {
        return (text &&
            !React.isValidElement(text) &&
            Object.prototype.toString.call(text) === '[object Object]');
    };
    Cell.prototype.shouldComponentUpdate = function (nextProps) {
        if (has(nextProps.column, 'bodyRender')) {
            return true;
        }
        return this.getText(this.props) !== this.getText(nextProps);
    };
    Cell.prototype.render = function () {
        var _a;
        var _b = this.props, prefix = _b.prefix, column = _b.column, data = _b.data, pos = _b.pos;
        var name = column.name, bodyRender = column.bodyRender, textAlign = column.textAlign, nowrap = column.nowrap, className = column.className, defaultText = column.defaultText;
        var text = get(data, name);
        if (isNil(text) && defaultText) {
            text = defaultText;
        }
        var tdProps;
        var colSpan;
        var rowSpan;
        if (typeof bodyRender === 'function') {
            text = bodyRender(data, pos, name);
            if (this.isInvalidRenderCellText(text)) {
                tdProps = text.props || {};
                colSpan = tdProps.colSpan;
                rowSpan = tdProps.rowSpan;
                text = text.children;
            }
        }
        if (this.isInvalidRenderCellText(text)) {
            text = null;
        }
        if (rowSpan === 0 || colSpan === 0) {
            return null;
        }
        return (React.createElement("td", __assign({ className: classnames(prefix + "-grid-td", className, (_a = {},
                _a[prefix + "-grid-text-align-" + textAlign] = textAlign,
                _a[prefix + "-grid-nowrap"] = nowrap,
                _a)) }, tdProps, { onClick: this.onClick }), text));
    };
    return Cell;
}(Component));
export default Cell;
