/// <reference types="lodash" />
import * as React from 'react';
import { PureComponent } from 'react';
import Store from './Store';
import { IGridSelctionAllCheckboxProps } from './SelectionCheckboxAll';
import { IGridColumn, IGridOnChangeConfig, GridScrollPosition, GridSortType, GridRowClassNameType, GridPaginationType, IGridPageInfo, IGridScrollDelta, IGridSelection, IGridExpandation, IGridRowClickHander, IGridOnExpandHandler, IGridColumnBodyRenderFunc } from './types';
import { ICheckboxEvent } from '../checkbox';
export interface IGridProps<Data = any> {
    columns: IGridColumn[];
    datasets: Data[];
    rowKey?: string;
    onChange?: (conf: IGridOnChangeConfig) => any;
    scroll?: IGridScrollDelta;
    sortBy?: string;
    sortType?: GridSortType;
    defaultSortType?: GridSortType;
    emptyLabel?: React.ReactNode;
    selection?: IGridSelection<Data>;
    expandation?: IGridExpandation<Data>;
    loading?: boolean;
    bordered?: boolean;
    className?: string;
    rowClassName?: GridRowClassNameType<Data>;
    pageInfo?: IGridPageInfo;
    paginationType?: GridPaginationType;
    onRowClick?: IGridRowClickHander<Data>;
    ellipsis?: boolean;
    onExpand?: IGridOnExpandHandler<Data>;
    components?: {
        row?: React.ComponentType;
    };
    rowProps?: (data: Data, index: number) => any;
}
export interface IGridState {
    mouseOverRowIndex: number;
    fixedColumnsBodyRowsHeight: Array<number | string>;
    fixedColumnsHeadRowsHeight: Array<number | string>;
    fixedColumnsBodyExpandRowsHeight: Array<number | string>;
    expandRowKeys: boolean[];
}
export interface IGridInnerColumn<Data> extends IGridColumn<Data> {
    key?: string;
}
export declare class Grid<Data = any> extends PureComponent<IGridProps<Data>, IGridState> {
    static defaultProps: Partial<IGridProps>;
    mounted: boolean;
    checkboxPropsCache: {
        [key: string]: {
            disabled?: boolean;
        };
    };
    store: Store;
    tableNode: HTMLDivElement | null;
    bodyTable: HTMLDivElement | null;
    leftBody: HTMLDivElement | null;
    rightBody: HTMLDivElement | null;
    scrollBody: HTMLDivElement | null;
    scrollHeader: HTMLDivElement | null;
    scrollPosition: GridScrollPosition;
    lastScrollLeft: number;
    lastScrollTop: number;
    constructor(props: IGridProps<Data>);
    getExpandRowKeys(props: IGridProps<Data>): boolean[];
    syncFixedTableRowHeight: () => void;
    onChange: (conf: IGridOnChangeConfig) => void;
    onPaginationChange: (pageSize: number, current: number) => void;
    getDataKey: (data: Data, rowIndex: React.ReactText) => any;
    isAnyColumnsFixed: () => any;
    isAnyColumnsLeftFixed: () => any;
    isAnyColumnsRightFixed: () => any;
    getLeftColumns: () => any;
    getRightColumns: () => any;
    handleExpandRow: (clickRow: number, rowData: Data) => (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    getExpandBodyRender: (expandRowKeys: boolean[]) => IGridColumnBodyRenderFunc<Data>;
    getColumns: (props: IGridProps<Data>, columnsArg?: IGridInnerColumn<Data>[], expandRowKeysArg?: boolean[]) => IGridInnerColumn<Data>[];
    getLeftFixedTable: () => JSX.Element[];
    getRightFixedTable: () => JSX.Element[];
    setScrollPosition(position: GridScrollPosition): void;
    setScrollPositionClassName(): void;
    handleBodyScroll: (e: React.UIEvent<HTMLDivElement>) => void;
    onResize: (() => void) & import("lodash").Cancelable;
    onRowMouseEnter: (mouseOverRowIndex: number) => void;
    getTable: (options?: {
        columns?: IGridInnerColumn<Data>[];
        fixed?: "left" | "right";
    }) => JSX.Element[];
    getEmpty: (i18n: Record<string, string>) => JSX.Element;
    getCheckboxPropsByItem: (data: Data, rowIndex: number) => {
        disabled?: boolean;
    };
    onSelectChange: (selectedRowKeys: string[], data: Data | Data[]) => void;
    handleSelect: (data: Data, rowIndex: string, e: ICheckboxEvent<unknown>) => void;
    handleBatchSelect: IGridSelctionAllCheckboxProps<Data>['onSelect'];
    renderSelectionCheckbox: () => IGridColumnBodyRenderFunc<Data>;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentWillReceiveProps(nextProps: IGridProps<Data>): void;
    componentDidUpdate(): void;
    render(): JSX.Element;
}
export default Grid;
