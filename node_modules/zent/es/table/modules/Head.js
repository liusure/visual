import { __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import * as ReactDOM from 'react-dom';
import throttle from 'lodash-es/throttle';
import cx from 'classnames';
import helper from '../helper';
import Checkbox from '../../checkbox';
var stickRowClass = 'stickrow';
var fixRowClass = 'fixrow';
var Head = (function (_super) {
    __extends(Head, _super);
    function Head(props) {
        var _this = _super.call(this, props) || this;
        _this.setHeadStyle = function () {
            if (!_this.mounted) {
                return;
            }
            _this.getRect();
            if (window.scrollY > _this.relativeTop) {
                _this.setState({
                    isShowFixRow: true,
                    fixStyle: {
                        position: 'fixed',
                        top: 0,
                        left: _this.rect.left + "px",
                        height: _this.rect.height + "px",
                        width: _this.rect.width + "px",
                        zIndex: 1000,
                    },
                });
            }
            else {
                _this.setState({
                    isShowFixRow: false,
                    fixStyle: {},
                });
            }
        };
        _this.sort = function (item) {
            var name = item.name;
            var _a = _this.props, sortBy = _a.sortBy, sortType = _a.sortType, _b = _a.defaultSortType, defaultSortType = _b === void 0 ? 'desc' : _b;
            var newSortType;
            if (name === sortBy) {
                if (sortType === undefined) {
                    newSortType = defaultSortType;
                }
                else if (sortType === defaultSortType) {
                    newSortType = defaultSortType === 'asc' ? 'desc' : 'asc';
                }
                else {
                    newSortType = undefined;
                }
            }
            if (name !== sortBy) {
                newSortType = defaultSortType;
            }
            _this.props.onSort({
                sortBy: name,
                sortType: newSortType,
            });
        };
        _this.onSelect = function (e) {
            var isChecked = false;
            if (e.target.checked) {
                isChecked = true;
            }
            _this.props.selection.onSelectAll(isChecked);
        };
        _this.state = {
            isShowFixRow: false,
        };
        _this.relativeTop = 0;
        _this.mounted = false;
        _this.rect = {};
        return _this;
    }
    Head.prototype.componentDidMount = function () {
        this.mounted = true;
        if (this.props.autoStick) {
            this.throttleSetHeadStyle = throttle(this.setHeadStyle, 100, {
                leading: true,
            });
            window.addEventListener('scroll', this.throttleSetHeadStyle, true);
            window.addEventListener('resize', this.throttleSetHeadStyle, true);
        }
    };
    Head.prototype.componentWillUnmount = function () {
        this.mounted = false;
        if (this.props.autoStick) {
            window.removeEventListener('scroll', this.throttleSetHeadStyle, true);
            window.removeEventListener('resize', this.throttleSetHeadStyle, true);
        }
    };
    Head.prototype.getRect = function () {
        var node = ReactDOM.findDOMNode(this);
        if (!node) {
            return;
        }
        var tmpRect = node.getBoundingClientRect();
        this.rect = {
            top: tmpRect.top,
            height: tmpRect.height - 1,
            width: tmpRect.width,
        };
        this.relativeTop =
            this.rect.top - document.documentElement.getBoundingClientRect().top;
    };
    Head.prototype.renderTitle = function (item) {
        var _this = this;
        var _a = this.props, sortType = _a.sortType, sortBy = _a.sortBy;
        if (item.needSort) {
            var isActiveCol = sortBy === item.name;
            return (React.createElement("div", { onClick: function () { return _this.sort(item); }, className: cx('sort-col', { 'sort-col--active': isActiveCol }) },
                React.createElement("span", { className: "sort-col-title" }, item.title),
                React.createElement("span", { className: "sort-col-icon" },
                    React.createElement("span", { className: cx('caret-up', {
                            'sort-active': isActiveCol && sortType === 'asc',
                        }) }),
                    React.createElement("span", { className: cx('caret-down', {
                            'sort-active': isActiveCol && sortType === 'desc',
                        }) }))));
        }
        return item.title;
    };
    Head.prototype.renderCheckBox = function (index, selection) {
        var canSelectAll = selection.canSelectAll, needSelect = selection.needSelect, isSingleSelection = selection.isSingleSelection;
        if (needSelect && index === 0 && !isSingleSelection) {
            return (React.createElement(Checkbox, { className: "select-check", disabled: !canSelectAll, onChange: this.onSelect, checked: selection.isSelectAll, indeterminate: selection.isSelectPart }));
        }
        return null;
    };
    Head.prototype.renderTr = function (isFixTr, style) {
        var _this = this;
        if (style === void 0) { style = {}; }
        var _a = this.props, selection = _a.selection, needExpand = _a.needExpand;
        var needSelect = selection.needSelect;
        var className = isFixTr ? fixRowClass : stickRowClass;
        var tds = [];
        if (needExpand) {
            tds.push(React.createElement("div", { key: "-1", className: "td expanded-item" }));
        }
        this.props.columns.forEach(function (item, index) {
            var cellClass = 'cell';
            var isMoney = item.isMoney, textAlign = item.textAlign, width = item.width;
            if (index === 0 && needSelect) {
                cellClass += ' cell--selection';
            }
            if (isMoney) {
                cellClass += ' cell--money';
            }
            width = helper.getCalculatedWidth(width);
            var styleObj = {};
            if (width) {
                styleObj = {
                    width: width,
                    flex: '0 1 auto',
                };
            }
            if (helper.getAlignClass(textAlign) !== '') {
                cellClass += " cell--" + helper.getAlignClass(textAlign);
            }
            tds.push(React.createElement("div", { key: index, className: cellClass, style: styleObj },
                React.createElement("div", { className: "cell__child-container" },
                    _this.renderCheckBox(index, selection),
                    _this.renderTitle(item))));
        });
        return (React.createElement("div", { className: className + " tr", style: style, ref: function (c) {
                _this[className] = c;
            } }, tds));
    };
    Head.prototype.render = function () {
        var style = this.props.style;
        var _a = this.state, isShowFixRow = _a.isShowFixRow, fixStyle = _a.fixStyle;
        return (React.createElement("div", { className: "thead", style: style },
            this.renderTr(false),
            isShowFixRow && this.renderTr(true, fixStyle)));
    };
    return Head;
}(PureComponent));
export default Head;
