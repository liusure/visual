import intersection from 'lodash-es/intersection';
var helper = {
    getCalculatedWidth: function (width) {
        var res;
        if (typeof width === 'number') {
            res = width + "%";
        }
        else if (typeof width === 'string') {
            res = width;
        }
        return res;
    },
    isReactComponent: function (render) {
        var isReact = false;
        if (typeof render === 'function') {
            if (render.prototype && render.prototype.isReactComponent) {
                isReact = true;
            }
        }
        return isReact;
    },
    getAlignClass: function (textAlign) {
        var alignValue = '';
        if (textAlign) {
            switch (textAlign) {
                case 'left':
                    alignValue = 'start';
                    break;
                case 'right':
                    alignValue = 'end';
                    break;
                case 'center':
                    alignValue = 'center';
                    break;
                default:
                    alignValue = 'start';
            }
        }
        return alignValue;
    },
    needFixBatchComps: function (isTableInView, isFootInView, isSelectRows, isFixed) {
        var res = null;
        if (isTableInView && !isFootInView && isSelectRows) {
            if (!isFixed) {
                res = true;
            }
        }
        else if (isFixed) {
            res = false;
        }
        return res;
    },
    isSelectAll: function (rowKeys, subRowKeys) {
        return intersection(rowKeys, subRowKeys).length === subRowKeys.length;
    },
    isSelectPart: function (rowKeys, subRowKeys) {
        return intersection(rowKeys, subRowKeys).length > 0;
    },
    toggleEventListener: function (currentProps, nextProps) {
        var toggleEventListener;
        if (nextProps.batchComponentsAutoFixed !==
            currentProps.batchComponentsAutoFixed) {
            if (nextProps.batchComponentsAutoFixed) {
                toggleEventListener = 'addEventListener';
            }
            else {
                toggleEventListener = 'removeEventListener';
            }
        }
        return toggleEventListener;
    },
};
export default helper;
