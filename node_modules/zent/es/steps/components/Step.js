import { __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import classNames from 'classnames';
import Icon from '../../icon';
var Step = (function (_super) {
    __extends(Step, _super);
    function Step() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Step.prototype.render = function () {
        var props = this.props;
        var prefix = props.prefix, isCurrentStep = props.isCurrentStep, _a = props.status, status = _a === void 0 ? 'wait' : _a, isLastFinishStep = props.isLastFinishStep, stepLast = props.stepLast, stepNumber = props.stepNumber, title = props.title, description = props.description, sequence = props.sequence;
        var iconNode;
        if (status === 'finish') {
            iconNode = React.createElement(Icon, { type: "check-circle-o" });
        }
        else if (status === 'error') {
            iconNode = React.createElement(Icon, { type: "error-circle" });
        }
        else {
            iconNode = (React.createElement("span", { className: prefix + "-icon" }, sequence ? stepNumber : ''));
        }
        var classString = classNames(prefix + "-steps-item", prefix + "-steps-status-" + status, {
            'is-current': isCurrentStep,
            'is-last-finish': isLastFinishStep,
        });
        return (React.createElement("div", { className: classString },
            !stepLast && (React.createElement("div", { className: prefix + "-steps-tail" },
                React.createElement("i", null))),
            React.createElement("div", { className: prefix + "-steps-step" },
                React.createElement("div", { className: prefix + "-step-head" },
                    React.createElement("div", { className: prefix + "-step-head-inner" }, iconNode)),
                React.createElement("div", { className: prefix + "-step-main" },
                    React.createElement("div", { className: prefix + "-step-title" }, title),
                    description && (React.createElement("div", { className: prefix + "-step-description" }, description))))));
    };
    Step.defaultProps = {
        description: '',
    };
    return Step;
}(Component));
export default Step;
