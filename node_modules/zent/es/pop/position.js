import { __assign } from "tslib";
import capitalize from 'lodash-es/capitalize';
import isFunction from 'lodash-es/isFunction';
import Popover from '../popover';
var Position = Popover.Position;
var ARROW_OFFSET_H = 15;
var ARROW_OFFSET_V = 9;
var createPosition = function (x, y, side) {
    return {
        getCSSStyle: function () {
            return {
                position: 'absolute',
                left: Math.round(x) + "px",
                top: Math.round(y) + "px",
            };
        },
        name: "position-" + side,
    };
};
var CenterArrowPosition = __assign(__assign(__assign(__assign({}, (function () {
    var make = function (getX, side) {
        return Position.create(function (anchorBoundingBox, containerBoundingBox, contentDimension, options) {
            var right = anchorBoundingBox.right, left = anchorBoundingBox.left, top = anchorBoundingBox.top;
            var middle = (left + right) / 2;
            var x = getX(middle, contentDimension);
            var y = top - contentDimension.height - options.cushion;
            return createPosition(x, y, "top-" + side);
        });
    };
    return {
        TopLeft: make(function (middle) { return middle - ARROW_OFFSET_H; }, 'left'),
        TopRight: make(function (middle, contentDimension) {
            return middle - (contentDimension.width - ARROW_OFFSET_H);
        }, 'right'),
    };
})()), (function () {
    var make = function (getX, side) {
        return Position.create(function (anchorBoundingBox, containerBoundingBox, contentDimension, options) {
            var left = anchorBoundingBox.left, right = anchorBoundingBox.right, bottom = anchorBoundingBox.bottom;
            var middle = (left + right) / 2;
            var x = getX(middle, contentDimension);
            var y = bottom + options.cushion;
            return createPosition(x, y, "bottom-" + side);
        });
    };
    return {
        BottomLeft: make(function (middle) { return middle - ARROW_OFFSET_H; }, 'left'),
        BottomRight: make(function (middle, contentDimension) {
            return middle - (contentDimension.width - ARROW_OFFSET_H);
        }, 'right'),
    };
})()), (function () {
    var make = function (getY, side) {
        return Position.create(function (anchorBoundingBox, containerBoundingBox, contentDimension, options) {
            var x = anchorBoundingBox.left - contentDimension.width - options.cushion;
            var middle = (anchorBoundingBox.top + anchorBoundingBox.bottom) / 2;
            var y = getY(middle, contentDimension);
            return createPosition(x, y, "left-" + side);
        });
    };
    return {
        LeftTop: make(function (middle) { return middle - ARROW_OFFSET_V; }, 'top'),
        LeftBottom: make(function (middle, contentDimension) {
            return middle - (contentDimension.height - ARROW_OFFSET_V);
        }, 'bottom'),
    };
})()), (function () {
    var make = function (getY, side) {
        return Position.create(function (anchorBoundingBox, containerBoundingBox, contentDimension, options) {
            var right = anchorBoundingBox.right, top = anchorBoundingBox.top, bottom = anchorBoundingBox.bottom;
            var x = right + options.cushion;
            var middle = (top + bottom) / 2;
            var y = getY(middle, contentDimension);
            return createPosition(x, y, "right-" + side);
        });
    };
    return {
        RightTop: make(function (middle) { return middle - ARROW_OFFSET_V; }, 'top'),
        RightBottom: make(function (middle, contentDimension) {
            return middle - (contentDimension.height - ARROW_OFFSET_V);
        }, 'bottom'),
    };
})());
export default function getPosition(position, centerArrow) {
    if (isFunction(position)) {
        return position;
    }
    var positionName = position
        .split('-')
        .map(function (s) { return capitalize(s); })
        .join('');
    var pos = Position[positionName];
    if (!pos) {
        pos = Position.TopCenter;
        positionName = 'TopCenter';
    }
    if (!centerArrow || /^.+Center$/.test(positionName)) {
        return pos;
    }
    return CenterArrowPosition[positionName];
}
