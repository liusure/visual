import { FormEvent } from 'react';
import { IForm, ValidateOption, $FieldSetValue, FormStrategy, FormBuilder, BasicModel, BasicBuilder } from 'formulr';
import { Subject } from 'rxjs';
export interface IFormAction {
    type: 'SUBMIT_START' | 'SUBMIT_SUCCESS' | 'SUBMIT_ERROR';
}
export interface IFormState {
    submitting: boolean;
}
export declare class ZentForm<T extends Record<string, BasicModel<unknown>>> implements IForm<T> {
    readonly inner: IForm<T>;
    state: IFormState;
    private dispatch;
    submit$: Subject<FormEvent<Element>>;
    constructor(inner: IForm<T>, state: IFormState, dispatch: (action: IFormAction) => void);
    readonly isSubmitting: boolean;
    readonly ctx: import("formulr").IFormContext;
    readonly model: import("formulr/lib/models/form").FormModel<T>;
    submit: (e?: import("react").SyntheticEvent<Element, Event>) => void;
    validate(option?: ValidateOption): Promise<any>;
    isValid(): boolean;
    isValidating(): boolean;
    getValue(): $FieldSetValue<T>;
    initialize(value: $FieldSetValue<T>): void;
    patchValue(value: $FieldSetValue<T>): void;
    resetValue(): void;
    submitStart(): void;
    submitSuccess(): void;
    submitError(error: any): void;
}
export declare function useForm<T extends Record<string, BasicBuilder<unknown, BasicModel<unknown>>>>(arg: FormStrategy.View | FormBuilder<T>): ZentForm<import("formulr").$FieldSetBuilderChildren<T>>;
