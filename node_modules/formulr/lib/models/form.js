import { __extends } from "tslib";
import { BehaviorSubject } from 'rxjs';
import { FieldSetModel } from './set';
import { ValidateOption } from '../validate';
var FormStrategy;
(function (FormStrategy) {
    FormStrategy[FormStrategy["Model"] = 0] = "Model";
    FormStrategy[FormStrategy["View"] = 1] = "View";
})(FormStrategy || (FormStrategy = {}));
var FORM = Symbol('form');
var FormModel = /** @class */ (function (_super) {
    __extends(FormModel, _super);
    function FormModel(children) {
        var _this = _super.call(this, children) || this;
        _this.children = children;
        /** @internal */
        _this.workingValidators = new Set();
        _this.isValidating$ = new BehaviorSubject(false);
        _this.form = _this;
        return _this;
    }
    FormModel.prototype.validate = function (option) {
        if (option === void 0) { option = ValidateOption.Default; }
        return _super.prototype.validate.call(this, option | ValidateOption.IncludeChildrenRecursively);
    };
    /** @internal */
    FormModel.prototype.addWorkingValidator = function (v) {
        this.workingValidators.add(v);
        this.updateIsValidating();
    };
    /** @internal */
    FormModel.prototype.removeWorkingValidator = function (v) {
        this.workingValidators.delete(v);
        this.updateIsValidating();
    };
    /** @internal */
    FormModel.prototype.updateIsValidating = function () {
        var isValidating = this.workingValidators.size > 0;
        if (isValidating !== this.isValidating$.getValue()) {
            this.isValidating$.next(isValidating);
        }
    };
    return FormModel;
}(FieldSetModel));
FormModel.prototype[FORM] = true;
function isFormModel(maybeModel) {
    return !!(maybeModel && maybeModel[FORM]);
}
export { FormStrategy, FormModel, isFormModel };
//# sourceMappingURL=form.js.map