import { __extends } from "tslib";
import { Subject } from 'rxjs';
import { BasicModel, isModel } from './basic';
import { ValidateOption } from '../validate';
import { Some, None } from '../maybe';
import { isPlainObject } from '../utils';
var SET = Symbol('set');
var FieldSetModel = /** @class */ (function (_super) {
    __extends(FieldSetModel, _super);
    /** @internal */
    function FieldSetModel(children) {
        var _this = _super.call(this) || this;
        /** @internal */
        _this.patchedValue = null;
        _this.childRegister$ = new Subject();
        _this.childRemove$ = new Subject();
        _this.children = children;
        return _this;
    }
    FieldSetModel.prototype.initialize = function (values) {
        if (!isPlainObject(values)) {
            return;
        }
        this.initialValue = Some(values);
        var keys = Object.keys(values);
        for (var i = 0; i < keys.length; i += 1) {
            var key = keys[i];
            var child = this.children[key];
            if (isModel(child)) {
                child.initialize(values[key]);
            }
        }
    };
    /**
     * @internal
     */
    FieldSetModel.prototype.getPatchedValue = function (name) {
        if (this.patchedValue && name in this.patchedValue) {
            return Some(this.patchedValue[name]);
        }
        return None();
    };
    FieldSetModel.prototype.getRawValue = function () {
        var value = {};
        var childrenKeys = Object.keys(this.children);
        for (var i = 0; i < childrenKeys.length; i++) {
            var key = childrenKeys[i];
            var model = this.children[key];
            var childValue = model.getRawValue();
            value[key] = childValue;
        }
        return value;
    };
    FieldSetModel.prototype.getSubmitValue = function () {
        var value = {};
        var childrenKeys = Object.keys(this.children);
        for (var i = 0; i < childrenKeys.length; i++) {
            var key = childrenKeys[i];
            var model = this.children[key];
            var childValue = model.getSubmitValue();
            value[key] = childValue;
        }
        return value;
    };
    FieldSetModel.prototype.registerChild = function (name, model) {
        model.form = this.form;
        model.owner = this;
        if (this.children[name]) {
            var prevModel = this.children[name];
            prevModel.form = null;
            prevModel.owner = null;
        }
        this.children[name] = model;
        this.childRegister$.next(name);
    };
    FieldSetModel.prototype.removeChild = function (name) {
        var model = this.children[name];
        delete this.children[name];
        model.form = null;
        model.owner = null;
        this.childRemove$.next(name);
        return model;
    };
    FieldSetModel.prototype.valid = function () {
        if (this.error$.getValue() !== null) {
            return false;
        }
        var keys = Object.keys(this.children);
        for (var i = 0; i < keys.length; i += 1) {
            var key = keys[i];
            var child = this.children[key];
            if (!child.valid()) {
                return false;
            }
        }
        return true;
    };
    FieldSetModel.prototype.patchValue = function (value) {
        if (!isPlainObject(value)) {
            return;
        }
        this.patchedValue = value;
        var keys = Object.keys(value);
        for (var i = 0; i < keys.length; i += 1) {
            var key = keys[i];
            var child = this.children[key];
            if (child) {
                child.patchValue(value[key]);
            }
        }
    };
    FieldSetModel.prototype.clear = function () {
        var keys = Object.keys(this.children);
        for (var i = 0; i < keys.length; i += 1) {
            var key = keys[i];
            var child = this.children[key];
            if (child) {
                child.clear();
            }
        }
    };
    FieldSetModel.prototype.reset = function () {
        var keys = Object.keys(this.children);
        for (var i = 0; i < keys.length; i += 1) {
            var key = keys[i];
            var child = this.children[key];
            if (child) {
                child.reset();
            }
        }
    };
    FieldSetModel.prototype.validate = function (option) {
        var _this = this;
        if (option === void 0) { option = ValidateOption.Default; }
        if (option & ValidateOption.IncludeChildrenRecursively) {
            return Promise.all(Object.keys(this.children)
                .map(function (key) { return _this.children[key].validate(option); })
                .concat(this.triggerValidate(option)));
        }
        return this.triggerValidate(option);
    };
    FieldSetModel.prototype.pristine = function () {
        var keys = Object.keys(this.children);
        for (var i = 0; i < keys.length; i += 1) {
            var key = keys[i];
            var child = this.children[key];
            if (!child.pristine()) {
                return false;
            }
        }
        return true;
    };
    FieldSetModel.prototype.dirty = function () {
        return !this.pristine();
    };
    FieldSetModel.prototype.touched = function () {
        var keys = Object.keys(this.children);
        for (var i = 0; i < keys.length; i += 1) {
            var key = keys[i];
            var child = this.children[key];
            if (child.touched()) {
                return true;
            }
        }
        return false;
    };
    FieldSetModel.prototype.get = function (name) {
        return this.children[name];
    };
    return FieldSetModel;
}(BasicModel));
FieldSetModel.prototype[SET] = true;
function isFieldSetModel(maybeModel) {
    return !!(maybeModel && maybeModel[SET]);
}
export { FieldSetModel, isFieldSetModel };
//# sourceMappingURL=set.js.map