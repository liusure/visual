import { ValidateOption } from '../validate';
import { None } from '../maybe';
var REF = Symbol('ref');
var ModelRef = /** @class */ (function () {
    /**
     * @internal
     */
    function ModelRef(current, initialValue, owner) {
        if (current === void 0) { current = null; }
        if (initialValue === void 0) { initialValue = None(); }
        this.current = current;
        this.initialValue = initialValue;
        this.owner = owner;
        /**
         * @internal
         */
        this.patchedValue = None();
    }
    ModelRef.prototype.getModel = function () {
        return this.current;
    };
    ModelRef.prototype.setModel = function (model) {
        if (this.current) {
            this.current.form = null;
            this.current.owner = null;
        }
        this.current = model;
        if (model) {
            model.form = this.owner && this.owner.form;
            model.owner = this;
        }
    };
    ModelRef.prototype.getParent = function () {
        return this.owner;
    };
    ModelRef.prototype.dirty = function () {
        if (!this.current) {
            return false;
        }
        return this.current.dirty();
    };
    ModelRef.prototype.touched = function () {
        if (!this.current) {
            return false;
        }
        return this.current.touched();
    };
    ModelRef.prototype.validate = function (option) {
        if (option === void 0) { option = ValidateOption.Default; }
        if (!this.current) {
            return Promise.resolve();
        }
        return this.current.validate(option);
    };
    ModelRef.prototype.getRawValue = function () {
        if (this.current) {
            return this.current.getRawValue();
        }
        return null;
    };
    ModelRef.prototype.pristine = function () {
        if (this.current) {
            return this.current.pristine();
        }
        return true;
    };
    ModelRef.prototype.valid = function () {
        if (this.current) {
            return this.current.valid();
        }
        return true;
    };
    Object.defineProperty(ModelRef.prototype, "error", {
        get: function () {
            if (this.current) {
                return this.current.error;
            }
            return null;
        },
        set: function (error) {
            if (this.current) {
                this.current.error = error;
            }
        },
        enumerable: true,
        configurable: true
    });
    ModelRef.prototype.patchValue = function (value) {
        if (this.current) {
            this.current.patchValue(value);
        }
    };
    ModelRef.prototype.initialize = function (value) {
        if (this.current) {
            this.current.initialize(value);
        }
    };
    ModelRef.prototype.reset = function () {
        if (this.current) {
            this.current.reset();
        }
    };
    ModelRef.prototype.clear = function () {
        if (this.current) {
            this.current.clear();
        }
    };
    return ModelRef;
}());
ModelRef.prototype[REF] = true;
function isModelRef(maybeModelRef) {
    return !!(maybeModelRef && maybeModelRef[REF]);
}
export { ModelRef, isModelRef };
//# sourceMappingURL=ref.js.map