import { __extends } from "tslib";
import { BehaviorSubject } from 'rxjs';
import { BasicModel } from './basic';
import { Some, None, or, isSome, get } from '../maybe';
import { ValidateOption } from '../validate';
import { id } from '../utils';
var FIELD = Symbol('field');
var FieldModel = /** @class */ (function (_super) {
    __extends(FieldModel, _super);
    /** @internal */
    function FieldModel(defaultValue) {
        var _this = _super.call(this) || this;
        _this.defaultValue = defaultValue;
        _this.isTouched = false;
        _this.isCompositing = false;
        _this.normalizeBeforeSubmit = id;
        _this.value$ = new BehaviorSubject(defaultValue);
        return _this;
    }
    Object.defineProperty(FieldModel.prototype, "value", {
        get: function () {
            return this.value$.getValue();
        },
        set: function (value) {
            this.value$.next(value);
        },
        enumerable: true,
        configurable: true
    });
    FieldModel.prototype.reset = function () {
        this.value$.next(or(this.initialValue, this.defaultValue));
    };
    FieldModel.prototype.clear = function () {
        this.initialValue = None();
        this.value$.next(this.defaultValue);
    };
    FieldModel.prototype.initialize = function (value) {
        this.initialValue = Some(value);
        this.value$.next(value);
    };
    FieldModel.prototype.getRawValue = function () {
        return this.value$.getValue();
    };
    FieldModel.prototype.getSubmitValue = function () {
        var normalizeBeforeSubmit = this.normalizeBeforeSubmit;
        return normalizeBeforeSubmit(this.value$.getValue());
    };
    FieldModel.prototype.valid = function () {
        return this.error$.getValue() === null;
    };
    FieldModel.prototype.validate = function (option) {
        if (option === void 0) { option = ValidateOption.Default; }
        return this.triggerValidate(option);
    };
    FieldModel.prototype.patchValue = function (value) {
        this.value$.next(value);
    };
    FieldModel.prototype.pristine = function () {
        var value = this.value$.getValue();
        if (isSome(this.initialValue)) {
            return value === get(this.initialValue);
        }
        return value === this.defaultValue;
    };
    FieldModel.prototype.dirty = function () {
        return !this.pristine();
    };
    FieldModel.prototype.touched = function () {
        return this.isTouched;
    };
    return FieldModel;
}(BasicModel));
FieldModel.prototype[FIELD] = true;
function isFieldModel(maybeModel) {
    return !!(maybeModel && maybeModel[FIELD]);
}
export { FieldModel, isFieldModel };
//# sourceMappingURL=field.js.map