import { BehaviorSubject } from 'rxjs';
import { BasicModel } from './basic';
import { ValidateOption } from '../validate';
declare const FIELD: unique symbol;
export interface INormalizeBeforeSubmit<A, B> {
    (a: A): B;
}
declare class FieldModel<Value> extends BasicModel<Value> {
    private readonly defaultValue;
    /**
     * @internal
     */
    [FIELD]: boolean;
    readonly value$: BehaviorSubject<Value>;
    isTouched: boolean;
    isCompositing: boolean;
    normalizeBeforeSubmit: INormalizeBeforeSubmit<Value, any>;
    /** @internal */
    constructor(defaultValue: Value);
    value: Value;
    reset(): void;
    clear(): void;
    initialize(value: Value): void;
    getRawValue(): Value;
    getSubmitValue(): any;
    valid(): boolean;
    validate(option?: ValidateOption): Promise<unknown>;
    patchValue(value: Value): void;
    pristine(): boolean;
    dirty(): boolean;
    touched(): boolean;
}
declare function isFieldModel<T>(maybeModel: any): maybeModel is FieldModel<T>;
export { FieldModel, isFieldModel };
//# sourceMappingURL=field.d.ts.map