import { BehaviorSubject } from 'rxjs';
import { BasicModel } from './basic';
import { ValidateOption } from '../validate';
import { ModelRef } from './ref';
import { BasicBuilder } from '../builders/basic';
declare type FieldArrayChild<Item, Child extends BasicModel<Item>> = Child | ModelRef<Item, FieldArrayModel<Item, Child>, Child>;
declare const FIELD_ARRAY: unique symbol;
declare class FieldArrayModel<Item, Child extends BasicModel<Item> = BasicModel<Item>> extends BasicModel<readonly Item[]> {
    private readonly defaultValue;
    /**
     * @internal
     */
    [FIELD_ARRAY]: boolean;
    readonly children$: BehaviorSubject<FieldArrayChild<Item, Child>[]>;
    private readonly childFactory;
    /** @internal */
    constructor(childBuilder: BasicBuilder<Item, Child> | null, defaultValue: readonly Item[]);
    reset(): void;
    clear(): void;
    readonly children: FieldArrayChild<Item, Child>[];
    valid(): boolean;
    getRawValue(): (Item | null)[];
    getSubmitValue(): (Item | null)[];
    patchValue(value: Item[]): void;
    initialize(values: Item[]): void;
    push(...items: Item[]): void;
    pop(): Child | ModelRef<Item, FieldArrayModel<Item, Child>, Child> | undefined;
    shift(): Child | ModelRef<Item, FieldArrayModel<Item, Child>, Child> | undefined;
    unshift(...items: Item[]): void;
    splice(start: number, deleteCount?: number, ...items: readonly Item[]): FieldArrayChild<Item, Child>[];
    validate(option?: ValidateOption): Promise<any>;
    pristine(): boolean;
    dirty(): boolean;
    touched(): boolean;
}
declare function isFieldArrayModel<Item, Child extends BasicModel<Item> = BasicModel<Item>>(maybeModel: any): maybeModel is FieldArrayModel<Item, Child>;
export { FieldArrayChild, FieldArrayModel, isFieldArrayModel };
//# sourceMappingURL=array.d.ts.map