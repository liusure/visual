import { BehaviorSubject, Observable } from 'rxjs';
import { FieldSetModel } from './set';
import { BasicModel } from './basic';
import { ValidateOption } from '../validate';
declare enum FormStrategy {
    Model = 0,
    View = 1
}
declare const FORM: unique symbol;
declare class FormModel<Children extends Record<string, BasicModel<any>> = Record<string, BasicModel<any>>> extends FieldSetModel<Children> {
    readonly children: Children;
    /**
     * @internal
     */
    [FORM]: boolean;
    /** @internal */
    private readonly workingValidators;
    readonly isValidating$: BehaviorSubject<boolean>;
    constructor(children: Children);
    validate(option?: ValidateOption): Promise<any>;
    /** @internal */
    addWorkingValidator(v: Observable<unknown>): void;
    /** @internal */
    removeWorkingValidator(v: Observable<unknown>): void;
    /** @internal */
    private updateIsValidating;
}
declare function isFormModel<Children extends Record<string, BasicModel<any>> = Record<string, BasicModel<any>>>(maybeModel: any): maybeModel is FormModel<Children>;
export { FormStrategy, FormModel, isFormModel };
//# sourceMappingURL=form.d.ts.map