import { Subject } from 'rxjs';
import { BasicModel } from './basic';
import { ValidateOption } from '../validate';
import { Maybe } from '../maybe';
declare type $FieldSetValue<Children extends Record<string, BasicModel<any>>> = {
    [Key in keyof Children]: Children[Key]['phantomValue'];
};
declare const SET: unique symbol;
declare class FieldSetModel<Children extends Record<string, BasicModel<any>> = Record<string, BasicModel<any>>> extends BasicModel<$FieldSetValue<Children>> {
    /**
     * @internal
     */
    [SET]: boolean;
    /** @internal */
    patchedValue: $FieldSetValue<Children> | null;
    childRegister$: Subject<string>;
    childRemove$: Subject<string>;
    readonly children: Record<string, BasicModel<any>>;
    /** @internal */
    constructor(children: Children);
    initialize(values: $FieldSetValue<Children>): void;
    /**
     * @internal
     */
    getPatchedValue<T>(name: string): Maybe<T>;
    getRawValue(): $FieldSetValue<Children>;
    getSubmitValue(): any;
    registerChild(name: string, model: BasicModel<unknown>): void;
    removeChild(name: string): BasicModel<any>;
    valid(): boolean;
    patchValue(value: $FieldSetValue<Children>): void;
    clear(): void;
    reset(): void;
    validate(option?: ValidateOption): Promise<any>;
    pristine(): boolean;
    dirty(): boolean;
    touched(): boolean;
    get<Name extends keyof Children>(name: Name): Children[Name] | undefined | null;
}
declare function isFieldSetModel<Children extends Record<string, BasicModel<any>> = Record<string, BasicModel<any>>>(maybeModel: any): maybeModel is FieldSetModel<Children>;
export { FieldSetModel, $FieldSetValue, isFieldSetModel };
//# sourceMappingURL=set.d.ts.map