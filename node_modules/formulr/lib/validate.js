import { from, empty, of, defer } from 'rxjs';
import { catchError, map, concatAll, filter, takeWhile, finalize } from 'rxjs/operators';
import { isFieldSetModel } from './models';
export var ASYNC_VALIDATOR = Symbol('AsyncValidator');
export function isAsyncValidator(validator) {
    if (validator[ASYNC_VALIDATOR]) {
        return true;
    }
    return false;
}
export function createAsyncValidator(validator) {
    var _a;
    return _a = {},
        _a[ASYNC_VALIDATOR] = true,
        _a.validator = validator,
        _a;
}
// prettier-ignore
export var ValidateOption;
(function (ValidateOption) {
    ValidateOption[ValidateOption["Empty"] = 0] = "Empty";
    ValidateOption[ValidateOption["IncludeAsync"] = 2] = "IncludeAsync";
    ValidateOption[ValidateOption["IncludeUntouched"] = 4] = "IncludeUntouched";
    ValidateOption[ValidateOption["IncludeChildrenRecursively"] = 8] = "IncludeChildrenRecursively";
    ValidateOption[ValidateOption["ExcludePristine"] = 16] = "ExcludePristine";
    ValidateOption[ValidateOption["Default"] = 0] = "Default";
})(ValidateOption || (ValidateOption = {}));
var ErrorSubscriber = /** @class */ (function () {
    function ErrorSubscriber(model) {
        this.model = model;
    }
    ErrorSubscriber.prototype.next = function (error) {
        this.model.error = error;
    };
    return ErrorSubscriber;
}());
export { ErrorSubscriber };
var ValidatorContext = /** @class */ (function () {
    function ValidatorContext(model) {
        this.model = model;
    }
    ValidatorContext.prototype.getSection = function () {
        return this.model.owner;
    };
    ValidatorContext.prototype.getSectionValue = function () {
        var names = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            names[_i] = arguments[_i];
        }
        if (!this.model.owner || !isFieldSetModel(this.model.owner)) {
            return null;
        }
        if (names.length === 0) {
            return this.model.owner.getRawValue();
        }
        var data = {};
        for (var i = 0; i < names.length; i += 1) {
            var name_1 = names[i];
            var model = this.model.owner.get(name_1);
            if (model) {
                data[name_1] = model.getRawValue();
            }
        }
        return data;
    };
    ValidatorContext.prototype.getFormValue = function () {
        return this.model.form && this.model.form.getRawValue();
    };
    return ValidatorContext;
}());
export { ValidatorContext };
function runValidator(validator, _a, value, ctx) {
    var reject = _a.reject;
    try {
        if (isAsyncValidator(validator)) {
            var ret = validator.validator(value, ctx);
            if (ret === null) {
                return of(null);
            }
            return from(ret);
        }
        else {
            return of(validator(value, ctx));
        }
    }
    catch (error) {
        reject(error);
        return empty();
    }
}
var ValidatorExecutor = /** @class */ (function () {
    function ValidatorExecutor(model) {
        this.model = model;
        this.ctx = new ValidatorContext(model);
    }
    ValidatorExecutor.prototype.call = function (validation) {
        var _this = this;
        var option = validation.option, reject = validation.reject, resolve = validation.resolve;
        if (!this.model.touched() && !(option & ValidateOption.IncludeUntouched)) {
            resolve();
            return of(null);
        }
        if (option & ValidateOption.ExcludePristine && this.model.pristine()) {
            resolve();
            return of(null);
        }
        var value = this.model.getRawValue();
        var skipAsync = (option & ValidateOption.IncludeAsync) === 0;
        return from(this.model.validators).pipe(filter(function (validator) { return (skipAsync ? !isAsyncValidator(validator) : true); }), map(function (validator) { return defer(function () { return runValidator(validator, validation, value, _this.ctx); }); }), concatAll(), takeWhile(function (it) { return it === null; }, true), catchError(function (error) {
            reject(error);
            return empty();
        }), finalize(resolve));
    };
    return ValidatorExecutor;
}());
export function validate(model) {
    var executor = new ValidatorExecutor(model);
    return function (validation) { return executor.call(validation); };
}
//# sourceMappingURL=validate.js.map