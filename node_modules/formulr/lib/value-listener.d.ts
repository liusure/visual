import * as React from 'react';
import { FieldModel, FieldArrayModel, BasicModel } from './models';
export interface IFieldSetValueProps {
    name: string;
    children?: React.ReactNode;
}
export declare function FieldSetValue({ name, children }: IFieldSetValueProps): JSX.Element | null;
export interface IFieldValueCommonProps<T> {
    children?: (value: T | null) => React.ReactElement | null;
}
export interface IFieldValueModelDrivenProps<T> extends IFieldValueCommonProps<T> {
    name: string;
}
export interface IFieldValueViewDrivenProps<T> extends IFieldValueCommonProps<T> {
    model: FieldModel<T>;
}
export declare type IFieldValueProps<T> = IFieldValueModelDrivenProps<T> | IFieldValueViewDrivenProps<T>;
export declare function FieldValue<T extends React.ReactElement | null>(props: IFieldValueProps<T>): React.ReactElement | null;
export declare function useFieldArrayValue<Item, Child extends BasicModel<Item>>(field: string | FieldArrayModel<Item, Child>): import("./models/array").FieldArrayChild<Item, Child>[] | null;
//# sourceMappingURL=value-listener.d.ts.map