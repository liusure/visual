import { ISyncValidator, IMaybeError } from './validate';
export declare const SYMBOL_REQUIRED: unique symbol;
export declare function min(limit: number | string, message?: string): (value: string | number) => IMaybeError<string | number>;
export declare function max(limit: number, message?: string): (value: string | number) => IMaybeError<string | number>;
export declare function required(message?: string): ISyncValidator<any>;
export declare function requiredTrue(message?: string): ISyncValidator<boolean>;
export declare function email(message?: string): ISyncValidator<string>;
export interface IWithLength {
    length: number;
}
export declare function minLength<T extends IWithLength>(length: number, message?: string): ISyncValidator<T>;
export declare function maxLength<T extends IWithLength>(length: number, message?: string): ISyncValidator<T>;
export declare function pattern(regexp: RegExp, message?: string): ISyncValidator<string>;
//# sourceMappingURL=validators.d.ts.map