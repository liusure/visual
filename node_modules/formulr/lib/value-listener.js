import { __assign } from "tslib";
import * as React from 'react';
import { merge, never } from 'rxjs';
import { filter } from 'rxjs/operators';
import { useFormContext, FormContext } from './context';
import { useValue$ } from './hooks';
import { isFieldSetModel, isFieldModel, isFieldArrayModel } from './models';
import { noop } from './utils';
function getModelFromContext(ctx, name, model, check) {
    var parent = ctx.parent;
    var m = React.useMemo(function () {
        if (typeof name === 'string') {
            var m_1 = parent.get(name);
            if (check(m_1)) {
                return m_1;
            }
        }
        if (check(model)) {
            return model;
        }
        return null;
    }, [ctx, name, model, check, parent]);
    var _a = React.useState(m), maybeModel = _a[0], setModel = _a[1];
    React.useEffect(function () {
        if (!name) {
            return noop;
        }
        var m = parent.get(name);
        check(m) && setModel(m);
        var $ = merge(parent.childRegister$, parent.childRemove$)
            .pipe(filter(function (change) { return change === name; }))
            .subscribe(function (name) {
            var candidate = parent.get(name);
            if (check(candidate)) {
                setModel(candidate);
            }
        });
        return function () { return $.unsubscribe(); };
    }, [name, parent, m]);
    return maybeModel;
}
export function FieldSetValue(_a) {
    var name = _a.name, children = _a.children;
    var ctx = useFormContext();
    var model = getModelFromContext(ctx, name, undefined, isFieldSetModel);
    var childContext = React.useMemo(function () { return (__assign(__assign({}, ctx), { parent: model })); }, [ctx, model]);
    if (model) {
        return (React.createElement(FormContext.Provider, { key: model.id, value: childContext }, children));
    }
    return null;
}
export function FieldValue(props) {
    var _a = props, name = _a.name, maybeModel = _a.model, children = _a.children;
    var ctx = useFormContext();
    var model = getModelFromContext(ctx, name, maybeModel, isFieldModel);
    if (model) {
        var value = useValue$(model.value$, model.value);
        if (children) {
            return children(value);
        }
        return React.createElement(React.Fragment, null, value);
    }
    useValue$(never(), null);
    return null;
}
export function useFieldArrayValue(field) {
    var ctx = useFormContext();
    var model = getModelFromContext(ctx, field, field, isFieldArrayModel);
    if (!model) {
        useValue$(never(), null);
        return null;
    }
    var children = useValue$(model.children$, model.children);
    return children;
}
//# sourceMappingURL=value-listener.js.map