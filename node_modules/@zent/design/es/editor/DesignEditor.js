import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _assign from 'lodash/assign';

var _class, _temp, _class2, _temp2;

import React, { PureComponent, Component } from 'react';

import cx from 'classnames';


import _reorder from 'zent/es/utils/reorder';
import shallowEqual from 'zent/es/utils/shallowEqual';

var NOT_EVENT_MSG = 'onInputChange expects an `Event` with { target: { name, value } } as argument';

export var DesignEditor = (_temp = _class = function (_Component) {
  _inherits(DesignEditor, _Component);

  // value 的验证函数
  // eslint-disable-next-line


  // 以下属性需要子类重写

  // 组件的类型
  DesignEditor.validate = function validate(value, prevValue, changedProps) {
    return new Promise(function (resolve) {
      return resolve({});
    });
  };

  // 添加组件实例时的初始值


  // 组件的描述


  function DesignEditor(props) {
    _classCallCheck(this, DesignEditor);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.onInputChange = function (evt) {
      var _onChange;

      // 如果抛出来的不是 Event 对象，直接丢给 onChange
      if (!isEventLikeObject(evt)) {
        throw new Error(NOT_EVENT_MSG);
      }

      var onChange = _this.props.onChange;
      var target = evt.target;
      var name = target.name,
          type = target.type;
      var value = target.value;


      if (type === 'checkbox') {
        value = target.checked;
      }

      onChange((_onChange = {}, _onChange[name] = value, _onChange));

      _this.setMetaProperty(name, 'dirty');
    };

    _this.onCustomInputChange = function (name) {
      return function (value) {
        var _onChange2;

        var onChange = _this.props.onChange;

        onChange((_onChange2 = {}, _onChange2[name] = value, _onChange2));
        _this.setMetaProperty(name, 'dirty');
      };
    };

    _this.onInputBlur = function (evt) {
      // 如果抛出来的不是 Event 对象，直接丢给 onChange
      if (!isEventLikeObject(evt)) {
        throw new Error(NOT_EVENT_MSG);
      }

      var name = evt.target.name;

      _this.onCustomInputBlur(name);
    };

    _this.onCustomInputBlur = function (name) {
      _this.setMetaProperty(name, 'touched');

      _this.validateValue();
    };

    _this.state = _assign({}, _this.state, {
      meta: {}
    });

    _this.validateValue();
    return _this;
  }

  /**
   * 通用的 Input 元素 onChange 回调函数
   *
   * 适用于 Input, Checkbox, Select, Radio
   */


  /**
   * 有些组件的 onChange 事件抛出来的不是 Event 对象
   *
   * 适用于 Slider, Switch, DatePicker 以及其它自定义组件
   */


  /**
   * 处理 Input 元素的 blur 事件。
   */


  /**
   * 有些组件没有 onBlur 事件，用这个函数处理
   */


  /**
   * 获取 Field 的 meta 属性，包括 dirty, touched 等
   * @param {string} name Field 名字
   * @param {string} property meta 属性名字
   */
  DesignEditor.prototype.getMetaProperty = function getMetaProperty(name, property) {
    var meta = this.state.meta;

    return !!(meta && meta[name] && meta[name][property]);
  };

  /**
   * 设置 Field 的 meta 属性
   * @param {string} name Field 名字
   * @param {string} property meta 属性名字
   * @param {any} state 属性的值
   */


  DesignEditor.prototype.setMetaProperty = function setMetaProperty(name, property) {
    var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var meta = this.state.meta;

    var states = meta[name];
    if (!states || states[property] !== state) {
      var _assign2, _assign3;

      this.setState({
        meta: _assign({}, meta, (_assign3 = {}, _assign3[name] = _assign({}, states, (_assign2 = {}, _assign2[property] = state, _assign2)), _assign3))
      });
    }
  };

  /**
   * 返回表单是否有错误
   */


  DesignEditor.prototype.isValid = function isValid() {
    var validation = this.props.validation;

    return Object.keys(validation).length > 0;
  };

  DesignEditor.prototype.isInvalid = function isInvalid() {
    return !this.isValid();
  };

  /**
   * 触发一次表单校验
   */


  DesignEditor.prototype.validateValue = function validateValue() {
    var _props = this.props,
        value = _props.value,
        design = _props.design;

    design.validateComponentValue(value, value, []).then(function (errors) {
      var _design$setValidation;

      var id = design.getUUID(value);
      design.setValidation((_design$setValidation = {}, _design$setValidation[id] = errors, _design$setValidation));
    });
  };

  /*
   * Utility to reorder list for react-beautiful-dnd
   * Scans the list only once.
   */


  DesignEditor.prototype.reorder = function reorder(array, fromIndex, toIndex) {
    return _reorder(array, fromIndex, toIndex);
  };

  DesignEditor.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);
  };

  return DesignEditor;
}(Component), _class.designType = 'unknown', _class.designDescription = '未知组件', _class.getInitialValue = function () {}, _temp);

/**
 * 表单每个域的基础样式
 */
export var ControlGroup = (_temp2 = _class2 = function (_PureComponent) {
  _inherits(ControlGroup, _PureComponent);

  function ControlGroup() {
    _classCallCheck(this, ControlGroup);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  ControlGroup.prototype.render = function render() {
    var _props2 = this.props,
        className = _props2.className,
        prefix = _props2.prefix,
        showError = _props2.showError,
        error = _props2.error,
        showLabel = _props2.showLabel,
        label = _props2.label,
        labelAlign = _props2.labelAlign,
        helpDesc = _props2.helpDesc,
        required = _props2.required,
        children = _props2.children,
        focusOnLabelClick = _props2.focusOnLabelClick;


    var errorVisible = showError && error;

    return React.createElement(
      'div',
      {
        className: cx(prefix + '-design-editor__control-group', className, {
          'has-error': errorVisible
        })
      },
      React.createElement(focusOnLabelClick ? 'label' : 'div', {
        className: prefix + '-design-editor__control-group-container'
      }, showLabel ? React.createElement(
        'div',
        {
          className: cx(prefix + '-design-editor__control-group-label', labelAlign && prefix + '-design-editor__control-group-label--' + labelAlign)
        },
        required && React.createElement(
          'span',
          {
            className: prefix + '-design-editor__control-group-required-star'
          },
          '*'
        ),
        label
      ) : null, React.createElement(
        'div',
        { className: prefix + '-design-editor__control-group-control' },
        children,
        helpDesc && React.createElement(
          'div',
          {
            className: prefix + '-design-editor__control-group-help-desc'
          },
          helpDesc
        )
      )),
      errorVisible && React.createElement(
        'div',
        { className: prefix + '-design-editor__control-group-error' },
        error
      )
    );
  };

  return ControlGroup;
}(PureComponent), _class2.defaultProps = {
  required: false,
  showError: false,
  showLabel: true,
  focusOnLabelClick: true,
  error: '',
  prefix: 'zent'
}, _temp2);

function isEventLikeObject(evt) {
  return evt && evt.target && evt.target.name && evt.preventDefault && evt.stopPropagation;
}