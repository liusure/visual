import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _noop from 'lodash/noop';
import _isNumber from 'lodash/isNumber';
import _isFunction from 'lodash/isFunction';

var _class, _temp2;

import React, { PureComponent } from 'react';

import cx from 'classnames';

import Pop from 'zent/es/pop';

import LazyMap from '../utils/LazyMap';
import { serializeDesignType } from '../utils/design-type';
import { splitGroup, isGrouped } from '../utils/component-group';

var DesignEditorAddComponent = (_temp2 = _class = function (_PureComponent) {
  _inherits(DesignEditorAddComponent, _PureComponent);

  function DesignEditorAddComponent() {
    var _temp, _this, _ret;

    _classCallCheck(this, DesignEditorAddComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = {
      popVisibleMap: new LazyMap(false)
    }, _this.onPopVisibleChange = function (key) {
      return function (visible) {
        _this.setState({
          popVisibleMap: _this.state.popVisibleMap.clone().set(key, visible)
        });
      };
    }, _this.onAdd = function (component) {
      return function () {
        var componentInstanceCount = _this.props.componentInstanceCount;


        if (canAddMoreInstance(component, componentInstanceCount)) {
          var shouldCreate = component.shouldCreate;

          shouldAddComponentPromise(component, shouldCreate).then(function () {
            var _this$props = _this.props,
                fromSelected = _this$props.fromSelected,
                onAddComponent = _this$props.onAddComponent;

            onAddComponent(component, fromSelected);
          }, _noop);
        }
      };
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  DesignEditorAddComponent.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        components = _props.components,
        prefix = _props.prefix,
        componentInstanceCount = _props.componentInstanceCount;
    var popVisibleMap = this.state.popVisibleMap;


    if (!components || !components.length) {
      return null;
    }

    if (isGrouped(components)) {
      return this.renderGrouped();
    }

    return React.createElement(
      'div',
      {
        className: prefix + '-design-editor-add-component ' + prefix + '-design-editor-add-component--mixed'
      },
      React.createElement(
        'div',
        { className: prefix + '-design-editor-add-component__mixed-title' },
        '\u6DFB\u52A0\u5185\u5BB9'
      ),
      React.createElement(
        'div',
        { className: prefix + '-design-editor-add-component__mixed-list' },
        components.map(function (c) {
          var type = c.type;

          var key = serializeDesignType(type);

          return React.createElement(ComponentButton, {
            prefix: prefix,
            type: 'mixed',
            key: key,
            component: c,
            componentInstanceCount: componentInstanceCount,
            onAdd: _this2.onAdd,
            popVisibleMap: popVisibleMap,
            onPopVisibleChange: _this2.onPopVisibleChange
          });
        })
      )
    );
  };

  DesignEditorAddComponent.prototype.renderGrouped = function renderGrouped() {
    var _this3 = this;

    var _props2 = this.props,
        components = _props2.components,
        prefix = _props2.prefix,
        componentInstanceCount = _props2.componentInstanceCount;
    var popVisibleMap = this.state.popVisibleMap;

    var groups = splitGroup(components);

    return React.createElement(
      'div',
      {
        className: prefix + '-design-editor-add-component ' + prefix + '-design-editor-add-component--grouped'
      },
      groups.map(function (g) {
        return React.createElement(ComponentGroup, {
          prefix: prefix,
          key: g.group.name,
          group: g.group,
          components: g.components,
          componentInstanceCount: componentInstanceCount,
          onAdd: _this3.onAdd,
          popVisibleMap: popVisibleMap,
          onPopVisibleChange: _this3.onPopVisibleChange
        });
      })
    );
  };

  return DesignEditorAddComponent;
}(PureComponent), _class.defaultProps = {
  fromSelected: false,
  prefix: 'zent'
}, _temp2);
export { DesignEditorAddComponent as default };


function ComponentGroup(_ref) {
  var prefix = _ref.prefix,
      group = _ref.group,
      components = _ref.components,
      onAdd = _ref.onAdd,
      componentInstanceCount = _ref.componentInstanceCount,
      onPopVisibleChange = _ref.onPopVisibleChange,
      popVisibleMap = _ref.popVisibleMap;

  return React.createElement(
    'div',
    { className: prefix + '-design-editor-add-component__grouped' },
    React.createElement(
      'p',
      { className: prefix + '-design-editor-add-component__grouped-title' },
      group.name
    ),
    React.createElement(
      'div',
      { className: prefix + '-design-editor-add-component__grouped-list' },
      components.map(function (c) {
        var type = c.type;

        var key = serializeDesignType(type);

        return React.createElement(ComponentButton, {
          prefix: prefix,
          key: key,
          type: 'grouped',
          component: c,
          componentInstanceCount: componentInstanceCount,
          onAdd: onAdd,
          popVisibleMap: popVisibleMap,
          onPopVisibleChange: onPopVisibleChange
        });
      })
    )
  );
}

function ComponentButton(props) {
  var _cx;

  var prefix = props.prefix,
      component = props.component,
      componentInstanceCount = props.componentInstanceCount,
      onAdd = props.onAdd,
      popVisibleMap = props.popVisibleMap,
      onPopVisibleChange = props.onPopVisibleChange,
      type = props.type;


  var disabled = !canAddMoreInstance(component, componentInstanceCount);
  var key = serializeDesignType(component.type);
  var visible = popVisibleMap.get(key);
  var message = getLimitMessage(component, componentInstanceCount);

  return React.createElement(
    Pop,
    {
      content: message,
      trigger: disabled && message ? 'hover' : 'none',
      visible: visible,
      onVisibleChange: onPopVisibleChange(key),
      position: 'top-center',
      mouseLeaveDelay: 100,
      mouseEnterDelay: 300,
      className: prefix + '-design-editor-add-component-pop',
      wrapperClassName: prefix + '-design-editor-add-component-btn-wrapper ' + prefix + '-design-editor-add-component__' + type + '-btn-wrapper'
    },
    React.createElement(
      'a',
      {
        onClick: onAdd(component),
        className: cx(prefix + '-design-editor-add-component__' + type + '-btn', (_cx = {}, _cx[prefix + '-design-editor-add-component__' + type + '-btn--disabled'] = disabled, _cx)),
        disabled: disabled
      },
      component.editor.designDescription
    )
  );
}

function canAddMoreInstance(component, componentInstanceCount) {
  var type = component.type,
      limit = component.limit;

  var key = serializeDesignType(type);
  var count = componentInstanceCount.get(key);

  if (_isFunction(limit)) {
    return limit(count);
  }

  return limit ? count < limit : true;
}

function getLimitMessage(component, componentInstanceCount) {
  var type = component.type,
      limitMessage = component.limitMessage,
      limit = component.limit;

  var key = serializeDesignType(type);
  var count = componentInstanceCount.get(key);

  if (_isFunction(limitMessage)) {
    return limitMessage(count);
  }

  var defaultMessage = '';
  if (_isNumber(limit)) {
    // limit === 0 表示不限制
    if (limit > 0) {
      defaultMessage = '\u8BE5\u7EC4\u4EF6\u6700\u591A\u53EF\u4EE5\u6DFB\u52A0 ' + limit + ' \u4E2A';
    } else if (limit < 0) {
      defaultMessage = '该组件暂不可用';
    }
  }

  return limitMessage || defaultMessage;
}

// Normalize to Promise
function shouldAddComponentPromise(component, fn) {
  if (_isFunction(fn)) {
    return fn(component);
  }

  return Promise.resolve();
}