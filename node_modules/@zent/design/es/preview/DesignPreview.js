import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _get from 'lodash/get';
import _isFunction from 'lodash/isFunction';
import _defaultTo from 'lodash/defaultTo';
import _some from 'lodash/some';
import _find from 'lodash/find';

var _class, _temp2;

import React, { PureComponent } from 'react';
import cx from 'classnames';

import { DragDropContext, Droppable } from 'react-beautiful-dnd';

import DesignPreviewItem from './DesignPreviewItem';
import DesignPreviewController from './DesignPreviewController';
import DesignEditorItem from '../editor/DesignEditorItem';
import DesignEditorAddComponent from '../editor/DesignEditorAddComponent';
import { isExpectedDesignType } from '../utils/design-type';
import { isGrouped } from '../utils/component-group';
import { DND_PREVIEW_CONTROLLER, DEFAULT_BACKGROUND } from './constants';
import { ADD_COMPONENT_OVERLAY_POSITION } from '../constants';

/**
 * DesignPreview 和 config 组件是相互关联的
 *
 * 这个组件里的一些 props 是需要 config 组件提供的
 */
var DesignPreview = (_temp2 = _class = function (_PureComponent) {
  _inherits(DesignPreview, _PureComponent);

  function DesignPreview() {
    var _temp, _this, _ret;

    _classCallCheck(this, DesignPreview);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.previewItems = {}, _this.editorItems = {}, _this.editors = {}, _this.dispatchDragEnd = function (result) {
      var type = result.type;

      if (type === DND_PREVIEW_CONTROLLER) {
        _this.onPreviewDragEnd(result);
        return;
      }

      // Let editors handle their dnd actions
      _some(_this.editors, function (editor) {
        if (_isFunction(editor.shouldHandleDragEnd) && editor.shouldHandleDragEnd(type)) {
          _isFunction(editor.onDragEnd) && editor.onDragEnd(result);
          return true;
        }

        return false;
      });
    }, _this.savePreviewItem = function (id) {
      return function (instance) {
        saveRef(_this.previewItems, id, instance);
      };
    }, _this.saveEditorItem = function (id) {
      return function (instance) {
        saveRef(_this.editorItems, id, instance);
      };
    }, _this.saveEditor = function (id) {
      return function (instance) {
        saveRef(_this.editors, id, instance);
      };
    }, _this.scrollToItem = function (id, offsets) {
      var item = _this.previewItems[id];

      if (!item) {
        return;
      }

      item.scrollTop(offsets);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }
  // All props in this component are injected by Design


  DesignPreview.prototype.render = function render() {
    var _this2 = this,
        _cx3;

    var _props = this.props,
        components = _props.components,
        value = _props.value,
        validations = _props.validations,
        showError = _props.showError,
        settings = _props.settings,
        onSettingsChange = _props.onSettingsChange,
        onComponentValueChange = _props.onComponentValueChange,
        componentInstanceCount = _props.componentInstanceCount,
        design = _props.design,
        appendableComponents = _props.appendableComponents,
        showAddComponentOverlay = _props.showAddComponentOverlay,
        addComponentOverlayPosition = _props.addComponentOverlayPosition,
        selectedUUID = _props.selectedUUID,
        getUUIDFromValue = _props.getUUIDFromValue,
        onAddComponent = _props.onAddComponent,
        onSelect = _props.onSelect,
        onDelete = _props.onDelete,
        onEdit = _props.onEdit,
        onAdd = _props.onAdd,
        onMove = _props.onMove,
        className = _props.className,
        prefix = _props.prefix,
        globalConfig = _props.globalConfig,
        disabled = _props.disabled,
        footer = _props.footer;

    var isComponentsGrouped = isGrouped(appendableComponents);
    var cls = cx(prefix + '-design-preview', className);
    var hasAppendableComponent = appendableComponents.length > 0;

    return React.createElement(
      DragDropContext,
      { onDragEnd: this.dispatchDragEnd },
      React.createElement(
        'div',
        {
          className: cls,
          style: {
            backgroundColor: _get(settings, 'previewBackground', DEFAULT_BACKGROUND)
          }
        },
        disabled && React.createElement('div', { className: prefix + '-design__disabled-mask' }),
        React.createElement(
          Droppable,
          {
            droppableId: prefix + '-design-preview-list',
            type: DND_PREVIEW_CONTROLLER,
            direction: 'vertical'
          },
          function (provided, snapshot) {
            var _cx;

            var draggableIndex = 0;

            return React.createElement(
              'div',
              _extends({
                ref: provided.innerRef
              }, provided.droppableProps, {
                className: cx(prefix + '-design__item-list', (_cx = {}, _cx[prefix + '-design__item-list--full-height'] = !hasAppendableComponent, _cx))
              }),
              value.map(function (v) {
                var _cx2;

                var valueType = v.type;
                var comp = _find(components, function (c) {
                  return isExpectedDesignType(c, valueType);
                });
                var PreviewItem = comp.previewItem || DesignPreviewItem;
                var EditorItem = comp.editorItem || DesignEditorItem;
                var id = getUUIDFromValue(v);
                var selected = id === selectedUUID;
                var PreviewController = comp.previewController || DesignPreviewController;
                var draggable = _defaultTo(comp.dragable, true);

                return React.createElement(
                  PreviewItem,
                  {
                    prefix: prefix,
                    key: id,
                    id: id,
                    ref: _this2.savePreviewItem(id)
                  },
                  React.createElement(PreviewController, {
                    prefix: prefix,
                    value: v,
                    globalConfig: globalConfig,
                    settings: settings,
                    design: design,
                    id: id,
                    index: draggable ? draggableIndex++ : -1,
                    allowHoverEffects: !snapshot.isDraggingOver,
                    dragable: draggable,
                    editable: _defaultTo(comp.editable, true),
                    configurable: _defaultTo(comp.configurable, true),
                    canDelete: _defaultTo(comp.canDelete, true),
                    canInsert: _defaultTo(comp.canInsert, true),
                    highlightWhenSelect: _defaultTo(comp.highlightWhenSelect, true),
                    isSelected: selected,
                    onSelect: onSelect,
                    onDelete: onDelete,
                    onEdit: onEdit,
                    onAdd: onAdd,
                    onMove: onMove,
                    component: comp.preview,
                    previewProps: getAdditionalProps(comp.previewProps, v)
                  }),
                  selected && !showAddComponentOverlay && React.createElement(
                    EditorItem,
                    {
                      prefix: prefix,
                      disabled: disabled,
                      ref: _this2.saveEditorItem(id)
                    },
                    React.createElement(comp.editor, _extends({}, getAdditionalProps(comp.editorProps, v), {
                      ref: _this2.saveEditor(id),
                      value: v,
                      onChange: onComponentValueChange(v),
                      settings: settings,
                      onSettingsChange: onSettingsChange,
                      globalConfig: globalConfig,
                      design: design,
                      validation: validations[id] || {},
                      showError: showError,
                      prefix: prefix
                    }))
                  ),
                  selected && showAddComponentOverlay && React.createElement(
                    DesignEditorItem,
                    {
                      ref: _this2.saveEditorItem(id),
                      prefix: prefix,
                      className: cx(prefix + '-design-add-component-overlay', (_cx2 = {}, _cx2[prefix + '-design-add-component-overlay--top'] = addComponentOverlayPosition === ADD_COMPONENT_OVERLAY_POSITION.TOP, _cx2[prefix + '-design-add-component-overlay--bottom'] = addComponentOverlayPosition === ADD_COMPONENT_OVERLAY_POSITION.BOTTOM, _cx2[prefix + '-design-add-component-overlay--grouped'] = isComponentsGrouped, _cx2[prefix + '-design-add-component-overlay--mixed'] = !isComponentsGrouped, _cx2))
                    },
                    React.createElement(DesignEditorAddComponent, {
                      prefix: prefix,
                      fromSelected: true,
                      componentInstanceCount: componentInstanceCount,
                      components: appendableComponents,
                      onAddComponent: onAddComponent
                    })
                  )
                );
              }),
              provided.placeholder
            );
          }
        ),
        hasAppendableComponent && React.createElement(
          'div',
          {
            className: cx(prefix + '-design__add', (_cx3 = {}, _cx3[prefix + '-design__add--grouped'] = isComponentsGrouped, _cx3[prefix + '-design__add--mixed'] = !isComponentsGrouped, _cx3))
          },
          React.createElement(DesignEditorAddComponent, {
            prefix: prefix,
            componentInstanceCount: componentInstanceCount,
            components: appendableComponents,
            onAddComponent: onAddComponent
          })
        ),
        footer
      )
    );
  };

  DesignPreview.prototype.onPreviewDragEnd = function onPreviewDragEnd(result) {
    var source = result.source,
        destination = result.destination;

    // dropped outside

    if (!destination) {
      return;
    }

    var onMove = this.props.onMove;

    onMove(source.index, destination.index);
  };

  DesignPreview.prototype.getEditorBoundingBox = function getEditorBoundingBox(id) {
    var item = this.editorItems[id];

    if (!item) {
      return;
    }

    return item.getBoundingBox();
  };

  return DesignPreview;
}(PureComponent), _class.defaultProps = {
  background: '#f9f9f9',
  disabled: false,
  appendableComponents: [],
  prefix: 'zent'
}, _temp2);


function getAdditionalProps(propsOrFn, value) {
  var props = _isFunction(propsOrFn) ? propsOrFn(value) : propsOrFn;

  return props || {};
}

function saveRef(map, id, instance) {
  if (!instance) {
    delete map[id];
  } else {
    map[id] = instance;
  }
}

export default DesignPreview;