import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _get from 'lodash/get';
import _pick from 'lodash/pick';

var _class, _temp2;

import React, { PureComponent } from 'react';

import cx from 'classnames';

import { Draggable } from 'react-beautiful-dnd';
import Pop from 'zent/es/pop';

import { DND_PREVIEW_CONTROLLER, DEFAULT_BACKGROUND } from './constants';
import { ADD_COMPONENT_OVERLAY_POSITION } from '../constants';

var DesignPreviewController = (_temp2 = _class = function (_PureComponent) {
  _inherits(DesignPreviewController, _PureComponent);

  function DesignPreviewController() {
    var _temp, _this, _ret;

    _classCallCheck(this, DesignPreviewController);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.onSelect = function (evt) {
      var editable = _this.props.editable;

      if (!editable) {
        return;
      }

      _this.invokeCallback('onSelect', evt, false);
    }, _this.onPrepend = function (evt) {
      _this.invokeCallback('onAdd', evt, true, ADD_COMPONENT_OVERLAY_POSITION.TOP);
    }, _this.onAppend = function (evt) {
      _this.invokeCallback('onAdd', evt, true, ADD_COMPONENT_OVERLAY_POSITION.BOTTOM);
    }, _this.onDelete = function () {
      _this.invokeCallback('onDelete', null, true);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  DesignPreviewController.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        dragable = _props.dragable,
        configurable = _props.configurable,
        editable = _props.editable,
        canDelete = _props.canDelete,
        canInsert = _props.canInsert,
        highlightWhenSelect = _props.highlightWhenSelect,
        isSelected = _props.isSelected,
        PreviewComponent = _props.component,
        previewProps = _props.previewProps,
        settings = _props.settings,
        prefix = _props.prefix,
        id = _props.id,
        index = _props.index,
        allowHoverEffects = _props.allowHoverEffects;

    var props = _pick(this.props, ['value', 'design', 'globalConfig', 'settings']);
    var getClassName = function getClassName(highlight) {
      var _cx;

      return cx(prefix + '-design-preview-controller', (_cx = {}, _cx[prefix + '-design-preview-controller--editable'] = editable, _cx[prefix + '-design-preview-controller--selected'] = isSelected, _cx[prefix + '-design-preview-controller--highlight'] = highlight, _cx[prefix + '-design-preview-controller--dragable'] = dragable, _cx));
    };

    var tree = dragable ? React.createElement(
      Draggable,
      {
        draggableId: id,
        type: DND_PREVIEW_CONTROLLER,
        isDragDisabled: !dragable,
        index: index
      },
      function (provided, snapshot) {
        // 拖拽的时候隐藏各种按钮，会很丑
        var showButtons = configurable && allowHoverEffects && !snapshot.isDragging;
        var cls = getClassName(allowHoverEffects && highlightWhenSelect);

        return React.createElement(
          'div',
          { className: cls, onClick: _this2.onSelect },
          React.createElement(
            'div',
            _extends({
              ref: provided.innerRef
            }, provided.draggableProps, provided.dragHandleProps, {
              style: _extends({}, provided.draggableProps.style, {
                backgroundColor: _get(settings, 'previewBackground', DEFAULT_BACKGROUND)
              }),
              className: prefix + '-design-preview-controller__drag-handle'
            }),
            React.createElement(PreviewComponent, _extends({
              prefix: prefix
            }, previewProps, props))
          ),
          provided.placeholder,
          showButtons && canDelete && React.createElement(DeleteButton, { prefix: prefix, onDelete: _this2.onDelete }),
          showButtons && canInsert && React.createElement(AddButton, {
            prefix: prefix,
            onAdd: _this2.onPrepend,
            className: prefix + '-design-preview-controller__prepend'
          }),
          showButtons && canInsert && React.createElement(AddButton, {
            prefix: prefix,
            onAdd: _this2.onAppend,
            className: prefix + '-design-preview-controller__append'
          })
        );
      }
    ) : React.createElement(
      'div',
      {
        className: getClassName(highlightWhenSelect),
        onClick: this.onSelect
      },
      React.createElement(
        'div',
        {
          className: cx(prefix + '-design-preview-controller__drag-handle', prefix + '-design-preview-controller__drag-handle--inactive')
        },
        React.createElement(PreviewComponent, _extends({ prefix: prefix }, previewProps, props))
      ),
      configurable && canDelete && React.createElement(DeleteButton, { prefix: prefix, onDelete: this.onDelete }),
      configurable && canInsert && React.createElement(AddButton, {
        prefix: prefix,
        onAdd: this.onPrepend,
        className: prefix + '-design-preview-controller__prepend'
      }),
      configurable && canInsert && React.createElement(AddButton, {
        prefix: prefix,
        onAdd: this.onAppend,
        className: prefix + '-design-preview-controller__append'
      })
    );

    return tree;
  };

  DesignPreviewController.prototype.invokeCallback = function invokeCallback(action, evt, stopPropagation) {
    if (stopPropagation && evt) {
      evt.stopPropagation();
    }

    var value = this.props.value;

    var cb = this.props[action];

    for (var _len2 = arguments.length, args = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
      args[_key2 - 3] = arguments[_key2];
    }

    cb && cb.apply(undefined, [value].concat(args));
  };

  return DesignPreviewController;
}(PureComponent), _class.defaultProps = {
  prefix: 'zent'
}, _temp2);


function DeleteButton(_ref) {
  var prefix = _ref.prefix,
      onDelete = _ref.onDelete;

  return React.createElement(
    Pop,
    {
      content: '\u786E\u5B9A\u5220\u9664\uFF1F',
      trigger: 'click',
      position: 'left-center',
      centerArrow: true,
      onConfirm: onDelete,
      wrapperClassName: prefix + '-design-preview-controller__action-btn-delete'
    },
    React.createElement(IconDelete, { prefix: prefix, onClick: stopEventPropagation })
  );
}

function AddButton(_ref2) {
  var prefix = _ref2.prefix,
      onAdd = _ref2.onAdd,
      className = _ref2.className;

  return React.createElement(
    'div',
    {
      className: cx(prefix + '-design-preview-controller__action-btn-add-container', className)
    },
    React.createElement(
      'a',
      {
        className: prefix + '-design-preview-controller__action-btn-add',
        onClick: onAdd
      },
      React.createElement(IconAdd, { prefix: prefix })
    ),
    React.createElement(AddMarker, { prefix: prefix })
  );
}

function AddMarker(_ref3) {
  var prefix = _ref3.prefix;

  return React.createElement(
    'div',
    { className: prefix + '-design-preview-controller__add-marker' },
    React.createElement('i', {
      className: cx(prefix + '-design-preview-controller__add-marker-circle', prefix + '-design-preview-controller__add-marker-circle--left')
    }),
    React.createElement('div', { className: prefix + '-design-preview-controller__add-marker-line' }),
    React.createElement('i', {
      className: cx(prefix + '-design-preview-controller__add-marker-circle', prefix + '-design-preview-controller__add-marker-circle--right')
    })
  );
}

function IconAdd(_ref4) {
  var prefix = _ref4.prefix;

  return React.createElement(
    'svg',
    {
      width: '17',
      height: '17',
      viewBox: '0 0 17 17',
      xmlns: 'http://www.w3.org/2000/svg',
      className: prefix + '-design-preview-controller__icon-add'
    },
    React.createElement(
      'g',
      { fill: 'none', fillRule: 'evenodd' },
      React.createElement('circle', { cx: '8.5', cy: '8.5', r: '8.5' }),
      React.createElement('path', { d: 'M8 8H5v1h3v3h1V9h3V8H9V5H8v3z', fill: '#FFF' })
    )
  );
}

var IconDelete = function (_PureComponent2) {
  _inherits(IconDelete, _PureComponent2);

  function IconDelete() {
    _classCallCheck(this, IconDelete);

    return _possibleConstructorReturn(this, _PureComponent2.apply(this, arguments));
  }

  IconDelete.prototype.render = function render() {
    var _props2 = this.props,
        prefix = _props2.prefix,
        onClick = _props2.onClick;

    return React.createElement(
      'svg',
      {
        width: '20',
        height: '20',
        viewBox: '0 0 20 20',
        xmlns: 'http://www.w3.org/2000/svg',
        className: prefix + '-design-preview-controller__icon-delete',
        onClick: onClick
      },
      React.createElement(
        'g',
        { fill: 'none', fillRule: 'evenodd' },
        React.createElement('circle', { cx: '10', cy: '10', r: '10' }),
        React.createElement('path', {
          fill: '#FFF',
          d: 'M13.75 7.188l-.937-.938L10 9.063 7.188 6.25l-.938.937L9.062 10 6.25 12.812l.937.938L10 10.938l2.812 2.812.938-.937L10.938 10'
        })
      )
    );
  };

  return IconDelete;
}(PureComponent);

function stopEventPropagation(evt) {
  evt && evt.stopPropagation();
}

export default DesignPreviewController;