import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _has from 'lodash/has'; /**
                                * A lazy map with default value.
                                *
                                * If most of the entries in your map defaults to the same value, you can use LazyMap to save memory.
                                */

var LazyMap = function () {
  function LazyMap(defaultValue) {
    var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, LazyMap);

    this.defaultValue = defaultValue;
    this.map = map;
  }

  LazyMap.prototype.get = function get(key) {
    if (_has(this.map, key)) {
      return this.map[key];
    }

    return this.defaultValue;
  };

  LazyMap.prototype.set = function set(key, value) {
    this.map[key] = value;
    return this;
  };

  LazyMap.prototype.clone = function clone() {
    return new LazyMap(this.defaultValue, this.map);
  };

  LazyMap.prototype.has = function has(key) {
    return _has(this.map, key);
  };

  /* Use this iff value is a number */


  LazyMap.prototype.inc = function inc(key) {
    var oldValue = this.get(key);
    this.set(key, oldValue + 1);
    return this;
  };

  /* Use this iff value is a number */


  LazyMap.prototype.dec = function dec(key) {
    var oldValue = this.get(key);
    this.set(key, oldValue - 1);
    return this;
  };

  return LazyMap;
}();

export { LazyMap as default };